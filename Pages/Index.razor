@page "/"
@using BlazorDownloadFile
@using Geo.Gps.Serialization.Xml.Gpx.Gpx11
@using GPXRide.Classes
@using GPXRide.Enums
@using Serilog
@inject ISnackbar Snackbar
@inject IJSRuntime JS

<MudContainer Class="mt-8 justify-center">
        <MudPaper Class="d-flex pa-4 justify-center" Elevation="0">      
            <label  style="
                box-shadow: 0 2px 7px #4caf50;
                display: inline-flex;
                width: 200px;
                justify-content: space-around;
                border-radius: 2em;
                color: white;
                border:2px solid;
                cursor: pointer;
                align-items: center;
                padding:16px;
                background-color: #4caf50;"         
               for="fileInput">
                Upload GPX Files <MudIcon Icon="@Icons.Filled.CloudUpload"/>
            </label>
            <InputFile id="fileInput" OnChange="UploadFiles" hidden multiple accept=".gpx" />
        </MudPaper>
</MudContainer>

<MudContainer Class="mt-8 justify-center">

    <MudGrid>
        @foreach (var m_task in ConvertTasks)
        {
            var m_gpxFile = m_task.OriginalGpxFile;
            m_task.ConvertOptions.RouteName = string.IsNullOrWhiteSpace(m_task.ConvertOptions.RouteName) ? m_task.FileName : m_task.ConvertOptions.RouteName;
            <MudItem xs="16" sm="4">
                <MudCard Style="position:relative;">

                    @if (m_gpxFile is null)
                    {
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudSkeleton Width="300px" />
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="250px" />
                        <MudCardContent>
                            <MudSkeleton Animation="Animation.Wave" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudSkeleton SkeletonType="SkeletonType.Circle" Height="30px" Width="30px" Class="ml-2 mb-2" />
                            <MudSkeleton SkeletonType="SkeletonType.Circle" Height="30px" Width="30px" Class="ml-3 mb-2" />
                        </MudCardActions>
                        <MudOverlay Visible="@(m_gpxFile is null)" DarkBackground="true" Absolute="true">
                            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
                        </MudOverlay>
                    }
                    else
                    {
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h5">@m_gpxFile.metadata.name</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="@(() => DisposeConvertTask(m_task))" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body1" GutterBottom="true">Route Preferences</MudText>
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudCheckBox @bind-Checked="m_task.ConvertOptions.Motorway" Label="Motorway" Dense="true"></MudCheckBox>
                                    <MudCheckBox @bind-Checked="m_task.ConvertOptions.TollFree" Label="Toll Free" Dense="true"></MudCheckBox>
                                    <MudCheckBox @bind-Checked="m_task.ConvertOptions.DirtyRoads" Label="Dirty Roads" Dense="true"></MudCheckBox>
                                </MudItem>
                                <MudItem xs="3">
                                    <MudCheckBox @bind-Checked="m_task.ConvertOptions.Tunnel" Label="Tunnel" Dense="true"></MudCheckBox>
                                    <MudCheckBox @bind-Checked="m_task.ConvertOptions.Trains" Label="Trains" Dense="true"></MudCheckBox>
                                    <MudCheckBox @bind-Checked="m_task.ConvertOptions.Ferry" Label="Ferry" Dense="true"></MudCheckBox>
                                </MudItem>
                            </MudGrid>
                        
                            <MudDivider DividerType="DividerType.Middle" Class="my-4"/>
                            <MudText class="mb-2" Typo="Typo.body1">Convert Options</MudText>
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudCheckBox @bind-Checked="m_task.ConvertOptions.FirstWaypointAsMyPosition" Label="Use first Waypoint as 'MyPosition'" Dense="true"></MudCheckBox>
                                </MudItem>
                            </MudGrid>
                                                                 
                            <MudDivider DividerType="DividerType.Middle" Class="my-4"/>

                            @if (GetSourceTypes(m_gpxFile).Count >= 2)
                            {
                                <MudText class="mb-2" Typo="Typo.body1">Select Source Type</MudText>
                                <MudChipSet @bind-SelectedChip="m_task.SelectedSourceChip" Filter="true" Mandatory="true">
                                    @if (m_gpxFile.wpt != null && m_gpxFile.wpt.Any())
                                    {
                                        <MudChip Icon="@Icons.Material.Filled.LocationOn" Color="Color.Success" Text="Waypoints" Default="true">Waypoints</MudChip>
                                    }
                                    @if (m_gpxFile.trk != null && m_gpxFile.trk.Any())
                                    {
                                        <MudChip Icon="@Icons.Material.Filled.LinearScale" Color="Color.Secondary" Text="Track" Default="true">Track</MudChip>
                                    }
                                    @if (m_gpxFile.rte != null && m_gpxFile.rte.Any())
                                    {
                                        <MudChip Icon="@Icons.Material.Filled.AltRoute" Color="Color.Info" Text="Route" Default="true">Route</MudChip>
                                    }
                                </MudChipSet>

                                <MudDivider DividerType="DividerType.Middle" Class="my-4"/>
                            }
                            <MudTextField @bind-Value="m_task.ConvertOptions.RouteName" Label="Route Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                        </MudCardContent>
                        <MudCardActions>

                            @switch (m_task.State)
                            {
                                case ConvertState.Working:
                                    <MudChip Class="mr-2" Icon="@Icons.Material.Filled.HourglassBottom" Color="Color.Info">Converting...</MudChip>
                                    <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                                    break;
                                case ConvertState.Completed:
                                    <MudChip Icon="@Icons.Material.Filled.Check" Color="Color.Success">Conversion successfull</MudChip>
                                    <MudIconButton @onclick=@(async () => await BlazorDownloadFileService.DownloadFile($"{m_task.ConvertOptions.RouteName}.mvitinerary",m_task.ConvertedItineraryFile.ToZipArchiveStream(),"application/octet-stream")) Icon="@Icons.Material.Filled.FileDownload" Color="Color.Primary" aria-label="Download" />
                                    @if (_webShareSupported)
                                    {
                                        <MudIconButton @onclick="() => ShareItineraryFile(m_task)" Icon="@Icons.Material.Filled.Share" aria-label="Share" Color="Color.Info" />
                                    }
                                    break;
                                case ConvertState.Error:
                                    <MudChip Icon="@Icons.Material.Filled.Warning" Color="Color.Error">Conversion failed</MudChip>
                                    <MudIconButton @onclick="() => ConvertToItinerary(m_task)" Icon="@Icons.Material.Filled.Refresh" aria-label="Retry" Color="Color.Info" />
                                    break;
                                default:
                                    <MudButton @onclick="() => ConvertToItinerary(m_task)" Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Send">Convert to Itinerary</MudButton>
                                    break;
                            }

                        </MudCardActions>          
                    }
                </MudCard>
            </MudItem>
        }

    </MudGrid>

</MudContainer>

@code
{

    [Inject] IBlazorDownloadFileService BlazorDownloadFileService { get; set; }
    readonly List<ConvertTask> ConvertTasks = new();
    private bool _webShareSupported = false;

    protected override async Task OnInitializedAsync()
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        _webShareSupported = await IsWebShareSupportedAsync();
        await base.OnInitializedAsync();
    }
    private async Task ConvertToItinerary(ConvertTask convertTask)
    {

        convertTask.State = ConvertState.Working;
        convertTask.ConvertedItineraryFile = await Task.Run(() =>
        {

            try
            {
                ItineraryFile m_ItineraryFile = new()
                {
                    Itinerary =
                    {
                        Id = Guid.NewGuid().ToString(),
                        Length = 1,
                        Duration = 1,
                        VehicleClass = "bike",
                        Name = convertTask.ConvertOptions.RouteName,

                        Preferences =
                        {
                            DirtRoads = convertTask.ConvertOptions.DirtyRoads,
                            Trains = convertTask.ConvertOptions.Trains,
                            Motorway = convertTask.ConvertOptions.Motorway,
                            Tunnel = convertTask.ConvertOptions.Tunnel,
                            TollFree = convertTask.ConvertOptions.TollFree,
                            Ferry = convertTask.ConvertOptions.Ferry
                        }
                    }
                };
                SourceType type = convertTask.SelectedSourceChip is null ? (SourceType)Enum.Parse(typeof(SourceType), GetSourceTypes(convertTask.OriginalGpxFile).FirstOrDefault()) : (SourceType)Enum.Parse(typeof(SourceType), convertTask.SelectedSourceChip.Text);
                Log.Debug($"Selected Route Type:{type.ToString()}");
                GpxWaypoint[] waypoints = type switch
                {
                    SourceType.Route => convertTask.OriginalGpxFile.rte.FirstOrDefault().rtept,
                    SourceType.Track => convertTask.OriginalGpxFile.trk.FirstOrDefault().trkseg.FirstOrDefault().trkpt,
                    SourceType.Waypoints => convertTask.OriginalGpxFile.wpt,
                    _ => throw new ArgumentOutOfRangeException()
                };

                if (waypoints is null || !waypoints.Any())
                {
                    throw new Exception(("failed to get any Waypoints"));
                }

                foreach (var point in waypoints)
                {
                    Log.Debug($"Waypoint: Latitude: {point.lat} , Longitude: {point.lon}");

                    var stop = new Stop()
                    {
                        Latitude = point.lat,
                        Longitude = point.lon,
                        Address = point.name,
                        City = point.name

                    };

                    if (convertTask.ConvertOptions.FirstWaypointAsMyPosition && !m_ItineraryFile.Itinerary.Stops.Any())
                    {
                        stop.IsMyPosition = true;
                    }

                    m_ItineraryFile.Itinerary.Stops.Add(stop);
                }

                return m_ItineraryFile;

            }
            catch (Exception ex)
            {
                Log.Error(ex.Message);
                return null;
            }
        });

        await Task.Delay(500);
        convertTask.State = convertTask.ConvertedItineraryFile != null ? ConvertState.Completed : ConvertState.Error;
    }

    private void UploadFiles(InputFileChangeEventArgs e)
    {
        long MAXALLOWEDSIZE = 2097152;
        bool errorOnUpload = false;
        var entries = e.GetMultipleFiles();
        object _lock = new Object();

        entries.AsParallel().AsOrdered().ForAll(async fileentry =>
        {
            int? _Id = 0;

            lock(_lock)
            {
                _Id = ConvertTasks.Any() ? (ConvertTasks.Last().Id + 1) : 0;
                ConvertTasks.Add(new ConvertTask()
                {
                    Id = _Id,
                    OriginalGpxFile = null,
                    FileName = System.IO.Path.GetFileNameWithoutExtension(fileentry.Name)
                });
            }

            StateHasChanged();

            try
            {
                Log.Debug("Deserialize GPX File...");
                var gpxFile = await Gpx11SerializerAsync.DeserializeAsync(fileentry.OpenReadStream(MAXALLOWEDSIZE));

                if (gpxFile != null)
                {
                    Log.Debug("GPX File deserialized!");
                    Log.Debug($"Attaching GpxFile to ConvertTask with Id {_Id}");

                    ConvertTasks.Single(x => x.Id == _Id).OriginalGpxFile = gpxFile;
                    Log.Debug(("Done"));
                }
                else
                {
                    throw new Exception($"Failed to parse Gpx File {fileentry.Name}");
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex.Message);
                errorOnUpload = true;
                Log.Debug($"Removing Convert Task with Id {_Id}");
                ConvertTasks.RemoveAll(x => x.Id == _Id);
            }
            finally
            {
                StateHasChanged();
            }
        });

        if (!errorOnUpload)
        {
            Snackbar.Add("All files successfully uploaded!", Severity.Success);
        }
        else
        {
            if (ConvertTasks.Any())
            {
                Snackbar.Add("Some files failed to upload", Severity.Warning);
            }
            else
            {
                Snackbar.Add("Failed to upload files", Severity.Warning);
            }
        }
    }

    private List<string> GetSourceTypes(GpxFile gpxFile)
    {
        List<string> routeTypes = new();

        if (gpxFile.wpt != null && gpxFile.wpt.Any())
        {
            routeTypes.Add(SourceType.Waypoints.ToString());
        }
        if (gpxFile.rte != null && gpxFile.rte.Any())
        {
            routeTypes.Add(SourceType.Route.ToString());
        }
        if (gpxFile.trk != null && gpxFile.trk.Any())
        {
            routeTypes.Add(SourceType.Track.ToString());
        }

        return routeTypes;
    }

    private void DisposeConvertTask(ConvertTask convertTask)
    {
        ConvertTasks.Remove(convertTask);
    }

    private async Task<bool> IsWebShareSupportedAsync()
    {
        return (await JS.InvokeAsync<bool>("IsShareSupported"));
    }

    private async Task ShareItineraryFile(ConvertTask task)
    {
        string payload = Convert.ToBase64String(task.ConvertedItineraryFile.ToZipArchiveStream().ToArray());

        if (await JS.InvokeAsync<bool>("CanShareThisFile", $"{task.ConvertOptions.RouteName}.mvitinerary", "application/octet-stream", $"data:text/plain;base64,{payload}"))
        {
            try
            {
                await JS.InvokeVoidAsync("ShareFile","Share Itinerary File", task.ConvertOptions.RouteName, $"{task.ConvertOptions.RouteName}.mvitinerary", "application/octet-stream", $"data:text/plain;base64,{payload}");
            }
            catch (JSException ex)
            {
                if (ex.Message != null && ex.Message.Contains("Permission denied"))
                {
                    Snackbar.Add("Sorry! - Your Browser does not support sharing of this type of file!",Severity.Error);    
                }
            }
        }
        else
        {
            Snackbar.Add("Sorry! - Your Browser does not support sharing of this type of file!",Severity.Error);
        }       
    }

 }

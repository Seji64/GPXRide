@page "/"
@using Geo.Gps.Serialization.Xml.Gpx.Gpx11
@using GPXRide.Classes
@using GPXRide.Enums
@using GPXRide.Interfaces
@inject ISnackbar Snackbar
@inject IJSRuntime Js

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">

    <MudStack AlignItems="AlignItems.Center" Spacing="4">

        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
            
            <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles" Accept=".gpx">
                <ActivatorContent>
                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload">
                        Upload & Convert GPX Files
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>

            <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles" Accept=".mvtrip">
                <ActivatorContent>
                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload">
                        Upload & Convert MVTrip Files
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>

        </MudButtonGroup>
        
        <MudDivider Class="my-6" />

        <MudGrid>

            @foreach (IConvertTask convertTask in _convertTasks.Where(x => x.FileSourceType == FileSourceType.MVTrip))
            {
                TripToGpxConvertTask task = (TripToGpxConvertTask)convertTask;
                <MudItem xs="16" sm="6">
                    <MudCard Style="position:relative;">
                        @if (task.OriginalTripFile is null)
                        {
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudSkeleton Width="300px" />
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="250px" />
                            <MudCardContent>
                                <MudSkeleton Animation="Animation.Wave" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudSkeleton SkeletonType="SkeletonType.Circle" Height="30px" Width="30px" Class="ml-2 mb-2" />
                                <MudSkeleton SkeletonType="SkeletonType.Circle" Height="30px" Width="30px" Class="ml-3 mb-2" />
                            </MudCardActions>
                            <MudOverlay Visible="@(task.OriginalTripFile is null)" DarkBackground="true" Absolute="true">
                                <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
                            </MudOverlay>
                        }
                        else
                        {
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h5">@task.OriginalTripFile.Title</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="@(() => DisposeConvertTask(task))" />
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem xs="6">
                                        <MudField AdornmentIcon="@Icons.Material.Outlined.Speed" Adornment="Adornment.Start" Variant="Variant.Text">@Math.Round(task.OriginalTripFile.AvgSpeedKmh,2) km/h</MudField>
                                        <MudField AdornmentIcon="@Icons.Material.Outlined.TextRotationAngledown" Adornment="Adornment.Start" Variant="Variant.Text">@task.OriginalTripFile.MaxRollAngle °</MudField>
                                        <MudField AdornmentIcon="@Icons.Material.Outlined.MultilineChart" Adornment="Adornment.Start" Variant="Variant.Text">@task.OriginalTripFile.MaxThrottle %</MudField>
                                        
                                    </MudItem>
                                    <MudItem xs="6">
                                        <MudField AdornmentIcon="@Icons.Material.Outlined.SocialDistance" Adornment="Adornment.Start" Variant="Variant.Text">@(task.OriginalTripFile.TotalDistanceInMeters/ 1000 ) Km</MudField>
                                        <MudField AdornmentIcon="@Icons.Material.Outlined.Timer" Adornment="Adornment.Start" Variant="Variant.Text">@Math.Round(TimeSpan.FromSeconds(task.OriginalTripFile.TotalTimeInSeconds).TotalMinutes,2) Minutes</MudField>
                                        <MudField AdornmentIcon="@Icons.Material.Outlined.Badge" Adornment="Adornment.Start" Variant="Variant.Text">@task.OriginalTripFile.BikeModel</MudField>
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                             <MudCardActions>

                                @switch (task.State)
                                {
                                    case ConvertState.Working:
                                        <MudChip T="string" Class="mr-2" Icon="@Icons.Material.Filled.HourglassBottom" Color="Color.Info">Converting...</MudChip>
                                        <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                                        break;
                                    case ConvertState.Completed:
                                        <MudChip T="string" Icon="@Icons.Material.Filled.Check" Color="Color.Success">Conversion successful</MudChip>
                                        <MudIconButton @onclick=@(async () => await BlazorDownloadFileService.DownloadFile($"{task.OriginalTripFile.Title}.gpx",(await Gpx11SerializerAsync.SerializeAsync(task.ConvertedGpxFile)),"application/octet-stream")) Icon="@Icons.Material.Filled.FileDownload" Color="Color.Primary" aria-label="Download" />
                                        @if (_webShareSupported)
                                        {
                                            <MudIconButton @onclick="() => ShareGpxFile(task)" Icon="@Icons.Material.Filled.Share" aria-label="Share" Color="Color.Info" />
                                        }
                                        break;
                                    case ConvertState.Error:
                                        <MudChip T="string" Icon="@Icons.Material.Filled.Warning" Color="Color.Error">Conversion failed</MudChip>
                                        <MudIconButton @onclick="() => ConvertToGpx(task)" Icon="@Icons.Material.Filled.Refresh" aria-label="Retry" Color="Color.Info" />
                                        break;
                                    default:
                                        <MudButton @onclick="() => ConvertToGpx(task)" Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Send">Convert to Gpx</MudButton>
                                        break;
                                }

                            </MudCardActions>
                        }
                    </MudCard>
                </MudItem>
            }
            
            @foreach (IConvertTask convertTask in _convertTasks.Where(x => x.FileSourceType == FileSourceType.Gpx))
            {
                GpxToItineraryConvertTask task = (GpxToItineraryConvertTask)convertTask;
                GpxFile gpxFile = task.OriginalGpxFile;
                task.ConvertOptions.RouteName = string.IsNullOrWhiteSpace(task.ConvertOptions.RouteName) ? task.FileName : task.ConvertOptions.RouteName;

                <MudItem xs="16" sm="6">
                    <MudCard Style="position:relative;">

                        @if (gpxFile is null)
                        {
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudSkeleton Width="300px" />
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="250px" />
                            <MudCardContent>
                                <MudSkeleton Animation="Animation.Wave" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudSkeleton SkeletonType="SkeletonType.Circle" Height="30px" Width="30px" Class="ml-2 mb-2" />
                                <MudSkeleton SkeletonType="SkeletonType.Circle" Height="30px" Width="30px" Class="ml-3 mb-2" />
                            </MudCardActions>
                            <MudOverlay Visible="@(gpxFile is null)" DarkBackground="true" Absolute="true">
                                <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
                            </MudOverlay>
                        }
                        else
                        {
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h5">@gpxFile.metadata.name</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="@(() => DisposeConvertTask(task))" />
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.body1" GutterBottom="true">Route Preferences</MudText>
                                <MudGrid>
                                    <MudItem xs="6">
                                        <MudCheckBox @bind-Value="task.ConvertOptions.Motorway" Label="Motorway" Dense="true"></MudCheckBox>
                                        <MudCheckBox @bind-Value="task.ConvertOptions.TollFree" Label="Toll Free" Dense="true"></MudCheckBox>
                                        <MudCheckBox @bind-Value="task.ConvertOptions.DirtyRoads" Label="Dirty Roads" Dense="true"></MudCheckBox>
                                    </MudItem>
                                    <MudItem xs="3">
                                        <MudCheckBox @bind-Value="task.ConvertOptions.Tunnel" Label="Tunnel" Dense="true"></MudCheckBox>
                                        <MudCheckBox @bind-Value="task.ConvertOptions.Trains" Label="Trains" Dense="true"></MudCheckBox>
                                        <MudCheckBox @bind-Value="task.ConvertOptions.Ferry" Label="Ferry" Dense="true"></MudCheckBox>
                                    </MudItem>
                                </MudGrid>

                                <MudDivider DividerType="DividerType.Middle" Class="my-4" />
                                <MudText class="mb-2" Typo="Typo.body1">Convert Options</MudText>
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudCheckBox @bind-Value="task.ConvertOptions.FirstWaypointAsMyPosition" Label="Use first Waypoint as 'MyPosition'" Dense="true"></MudCheckBox>
                                    </MudItem>
                                </MudGrid>

                                <MudDivider DividerType="DividerType.Middle" Class="my-4" />

                                @if (GetSourceTypes(gpxFile).Count >= 2)
                                {
                                    <MudText class="mb-2" Typo="Typo.body1">Select Source Type</MudText>
                                    <MudChipSet @bind-SelectedValue="task.SourceType">
                                        @if (gpxFile.wpt != null && gpxFile.wpt.Any())
                                        {
                                            <MudChip Icon="@Icons.Material.Filled.LocationOn" Color="Color.Success" Value="SourceType.Waypoints" Text="Waypoints" Default="true">Waypoints</MudChip>
                                        }
                                        @if (gpxFile.trk != null && gpxFile.trk.Any())
                                        {
                                            <MudChip Icon="@Icons.Material.Filled.LinearScale" Color="Color.Secondary" Value="SourceType.Track" Text="Track" Default="true">Track</MudChip>
                                        }
                                        @if (gpxFile.rte != null && gpxFile.rte.Any())
                                        {
                                            <MudChip Icon="@Icons.Material.Filled.AltRoute" Color="Color.Info" Text="Route" Value="SourceType.Route" Default="true">Route</MudChip>
                                        }
                                    </MudChipSet>

                                    <MudDivider DividerType="DividerType.Middle" Class="my-4" />
                                }
                                <MudTextField @bind-Value="task.ConvertOptions.RouteName" Label="Route Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                            </MudCardContent>
                            <MudCardActions>

                                @switch (task.State)
                                {
                                    case ConvertState.Working:
                                        <MudChip T="string" Class="mr-2" Icon="@Icons.Material.Filled.HourglassBottom" Color="Color.Info">Converting...</MudChip>
                                        <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                                        break;
                                    case ConvertState.Completed:
                                        <MudChip T="string" Icon="@Icons.Material.Filled.Check" Color="Color.Success">Conversion successful</MudChip>
                                        <MudIconButton @onclick=@(async () => await BlazorDownloadFileService.DownloadFile($"{task.ConvertOptions.RouteName}.mvitinerary",task.ConvertedItineraryFile.ToZipArchiveStream(),"application/octet-stream")) Icon="@Icons.Material.Filled.FileDownload" Color="Color.Primary" aria-label="Download" />
                                        @if (_webShareSupported)
                                        {
                                            <MudIconButton @onclick="() => ShareItineraryFile(task)" Icon="@Icons.Material.Filled.Share" aria-label="Share" Color="Color.Info" />
                                        }
                                        break;
                                    case ConvertState.Error:
                                        <MudChip T="string" Icon="@Icons.Material.Filled.Warning" Color="Color.Error">Conversion failed</MudChip>
                                        <MudIconButton @onclick="() => ConvertToItinerary(task)" Icon="@Icons.Material.Filled.Refresh" aria-label="Retry" Color="Color.Info" />
                                        break;
                                    default:
                                        <MudButton @onclick="() => ConvertToItinerary(task)" Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Send">Convert to Itinerary</MudButton>
                                        break;
                                }

                            </MudCardActions>
                        }
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    </MudStack>
</MudContainer>